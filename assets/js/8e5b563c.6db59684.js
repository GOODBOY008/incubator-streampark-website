"use strict";(self.webpackChunkapache_streampark_website=self.webpackChunkapache_streampark_website||[]).push([[4680],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),g=o,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||a;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9827:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={id:"SSO",title:"SSO Integration",sidebar_position:10},i=void 0,l={unversionedId:"user-guide/SSO",id:"user-guide/SSO",title:"SSO Integration",description:"Background",source:"@site/docs/user-guide/10-SSO.md",sourceDirName:"user-guide",slug:"/user-guide/SSO",permalink:"/docs/user-guide/SSO",draft:!1,editUrl:"https://github.com/apache/incubator-streampark-website/edit/dev/docs/user-guide/10-SSO.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{id:"SSO",title:"SSO Integration",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"External Link Management",permalink:"/docs/user-guide/ExternalLink"},next:{title:"Programming Paradigm",permalink:"/docs/development/Programming-paradigm"}},c={},s=[{value:"Background",id:"background",level:2},{value:"SSO login workflow",id:"sso-login-workflow",level:2},{value:"How to enable SSO login",id:"how-to-enable-sso-login",level:2},{value:"Note",id:"note",level:2}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"background"},"Background"),(0,o.kt)("p",null,"As an enterpise practice, it's common to apply Single sign-on (SSO) across all applications, so that user credential can be managed in a centralised and secure manner."),(0,o.kt)("p",null,"Based on the fact that Streampark use Apache Shiro for authetication and authorization purpose, and we are going to use Pac4j framework to achive the Single Sign-On (SSO) support feature. Pac4j is recommented by Shiro community as SSO integration solution, and it's also applied by other Apache project, like Knox, Durid, Zeppelin, etc."),(0,o.kt)("h2",{id:"sso-login-workflow"},"SSO login workflow"),(0,o.kt)("p",null,"We come up three main use cases with the workflow shown below:"),(0,o.kt)("p",null,"a) New user login when SSO is enabled"),(0,o.kt)("img",{src:"/doc/image/sso/new-user-login-process.png"}),(0,o.kt)("br",null),(0,o.kt)("p",null,"b) Existing user login when SSO is enabled"),(0,o.kt)("img",{src:"/doc/image/sso/existing-user-login-process.png"}),(0,o.kt)("br",null),(0,o.kt)("p",null,"c) User login when when SSO is not enabled"),(0,o.kt)("img",{src:"/doc/image/sso/user-login-sso-not-enabled.png"}),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"how-to-enable-sso-login"},"How to enable SSO login"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Enable the SSO from the ",(0,o.kt)("inlineCode",{parentName:"li"},"application.yml"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"...\nspring:\n  profiles:\n    active: mysql #[h2,pgsql,mysql]\n    include: sso\n...\nsso:\n    # If turn to true, please provide the sso properties the application-sso.yml\n    enable: true\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Select preferred 3rd party login approch, such as Github or Google auth, and fill in the ",(0,o.kt)("inlineCode",{parentName:"li"},"application-sso.yml")," config as below: ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"pac4j:\n  callbackUrl: http://localhost:10000/callback\n  # Put all parameters under `properties`\n  # Check supported sso config parameters for different authentication clients from the below link\n  # https://github.com/pac4j/pac4j/blob/master/documentation/docs/config-module.md\n  properties:\n    # principalNameAttribute:\n    # Optional, change by authentication client\n    # Please replace and fill in your client config below when enabled SSO\n    principalNameAttribute: email\n    oidc:\n      type: google\n      id: xxx\n      secret: xxx\n      useNonce: true\n    # github:\n      # id: xxx\n      # secret: xxx\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Start the Streampark, and see whether it will redirect to external login page correctly and comple the authentication process:")),(0,o.kt)("img",{src:"/doc/image/sso/github-login.png"}),(0,o.kt)("br",null),(0,o.kt)("img",{src:"/doc/image/sso/google-login.png"}),(0,o.kt)("br",null),(0,o.kt)("img",{src:"/doc/image/sso/login-success-redirect.png"}),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"note"},"Note"),(0,o.kt)("p",null,"Currently we only support ",(0,o.kt)("inlineCode",{parentName:"p"},"OAuth")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenID Connect (OIDC)")," as normal supported login approch, if you need to support ",(0,o.kt)("inlineCode",{parentName:"p"},"Saml"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"CAS"),", please go to the ",(0,o.kt)("inlineCode",{parentName:"p"},"streampark-console/streampark-console-service/pom.xml"),", change to include them in the below dependency:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"        \x3c!-- Include pac4j-config/core/oauth/oidc--\x3e\n        <dependency>\n            <groupId>org.pac4j</groupId>\n            <artifactId>pac4j-springboot</artifactId>\n            <version>${pac4jVersion}</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>commons-collections</groupId>\n                    <artifactId>commons-collections</artifactId>\n                </exclusion>\n                \x3c!-- cas & opensaml is not supported--\x3e\n                <exclusion>\n                    <groupId>org.pac4j</groupId>\n                    <artifactId>pac4j-cas</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.pac4j</groupId>\n                    <artifactId>pac4j-saml-opensamlv3</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n")))}u.isMDXComponent=!0}}]);